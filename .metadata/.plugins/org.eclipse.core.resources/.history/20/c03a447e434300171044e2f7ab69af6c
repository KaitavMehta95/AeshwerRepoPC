package BinaryTrees;

import BinaryTrees.ChildrenSumProperty.Node;

public class ConvertTreeToChildSumPropertyTress {
	
	Node root;
	public static class Node
	{
	    int key;
	    Node left, right;
	 
	    public Node(int key)
	    {
	        this.key = key;
	        left = right = null;
	    }
	}

	

    void convertTree(Node node) 
    {
    }
    
    
    /* Given a binary tree, printInorder() prints out its inorder traversal*/
   void printInorder(Node root) 
   {
       if (root == null)
           return;
            
       /* first recur on left child */
       printInorder(root.left);
 
       /* then print the data of node */
       System.out.print(root.key + " ");
 
       /* now recur on right child */
       printInorder(root.right);
   }
   
	 // Driver program to test above functions
    public static void main(String args[]) 
    {
    	ConvertTreeToChildSumPropertyTress tree = new ConvertTreeToChildSumPropertyTress();
        tree.root = new Node(50);
        tree.root.left = new Node(7);
        tree.root.right = new Node(2);
        tree.root.left.left = new Node(3);
        tree.root.left.right = new Node(5);
        tree.root.right.left = new Node(1);
        tree.root.right.right = new Node(30);
  
        System.out.println("Inorder traversal before conversion is :");
        tree.printInorder(tree.root);
  
        tree.convertTree(tree.root);
        System.out.println("");
  
        System.out.println("Inorder traversal after conversion is :");
        tree.printInorder(tree.root);
  
    }
}
