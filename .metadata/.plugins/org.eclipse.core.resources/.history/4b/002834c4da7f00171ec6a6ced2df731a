package com.udemyCollectionConcurrency;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.PriorityBlockingQueue;

class FirstWorker1 implements Runnable{

	private BlockingQueue<String> blockingQueue ;
	
	public  FirstWorker1(BlockingQueue<String> blockingQueue) {
		this.blockingQueue =  blockingQueue;
	}
	@Override
	public void run() {
			try {
				System.out.println("Putting Item to Queue ");
				blockingQueue.put("A");
				blockingQueue.put("B");
				Thread.sleep(1000);
				blockingQueue.put("C");
				blockingQueue.put("D");
				Thread.sleep(1000);
				
			} catch (InterruptedException e) {
				e.printStackTrace();
		}
		
	}
}

class SecondWorker2 implements Runnable{

	private BlockingQueue<Integer> blockingQueue ;
	
	public  SecondWorker2(BlockingQueue<Integer> blockingQueue) {
		this.blockingQueue =  blockingQueue;
	}
	@Override
	public void run() {
		try {
			System.out.println("Putting Item to Queue ");
			blockingQueue.put("A");
			blockingQueue.put("B");
			Thread.sleep(1000);
			blockingQueue.put("C");
			blockingQueue.put("D");
			Thread.sleep(1000);
			
		} catch (InterruptedException e) {
			e.printStackTrace();
	}
	
} 
 
public class PriorityQueueLearn {

	public static void main(String[] args) {
		BlockingQueue<DelayedWorker> queue = new PriorityBlockingQueue<DelayedWorker>();
		
	}
}
