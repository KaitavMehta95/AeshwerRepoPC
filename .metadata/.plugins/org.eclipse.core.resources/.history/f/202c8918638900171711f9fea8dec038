/*
 * Minimum number of coin to form total value
 * 
 * Total : 4 by 1,2,3 coins
 * 
 *  	//Time complexity of this function: O(mn)
        //Space Complexity of this function: O(n)
 */
package DynamicProgrammingPractise;

public class CoinChange {

	private static int countWays(int[] arr, int len, int sum) {
		 // table[i] will be storing the number of solutions  for value i. We need n+1 rows as the table is constructed in bottom up manner
		//  using the base case (n = 0)
        int[] table = new int[sum+1];
 
        // Initialize all table values as 0
        Arrays.fill(table, 0);   //O(n)
 
        // Base case (If given value is 0)
        table[0] = 1;
		
	}
	
	public static void main(String[] args) {
		 
			int arr[] = {1, 2, 3};
	        int len = arr.length;
	        int sum = 4;
	        System.out.println(countWays(arr, len, sum));
	}

}
