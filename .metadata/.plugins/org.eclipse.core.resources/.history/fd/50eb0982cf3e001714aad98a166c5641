package LinkListProblems;

import org.omg.CORBA.NO_IMPLEMENT;

import LinkListProblems.LinkedListBasic.Node;

public class LinkListInsertionsAndDeletions {
	
	Node head;
	public static class Node
	{
		int data;
		Node next;
		Node(int data)
		{
			this.data =data;
			this.next = null;
		}
		
	} 

	 /* Inserts a new Node at front of the list. */	
	void addInFront(int data)
	{   
		Node new_Node = new Node(data);
		//update new node added to point to what ever head was pointing 
		new_Node.next = head;
		
		//Update Head node to the newly added node
		head = new_Node;
		
 	}
	
	
	void addInEnd(int data)
	{
		Node new_Node = new Node(data);
		
		if(head == null)
		{	
			//Update Head node to the newly added node and new_Node.next by default point to Null which is what we want
			head = new_Node;
			return;
		}
		
		Node last = head;
		while(last.next != null){
			last = last.next;
		}
		// reach the last node by traversal and then point that to the new node
		last.next = new_Node;
		
	}
	
	void insertAfter(Node pre_node,int data)
	{   
		Node new_Node = new Node(data);

		if(pre_node == null)
		{
		     System.out.println("The given previous node cannot be null");
	         return;
	    }
		
		// this if is not required but for understanding i have added it .. it only saves 1 extra object been created
		if(pre_node.next == null)
		{
		     pre_node.next = new_Node;	
		     return;
		}
		
		Node temp;
		temp = pre_node.next;
		pre_node.next = new_Node;
		new_Node.next = temp;
	}
	
	void printList()
	{
	     Node tnode = head;
	     while (tnode != null)
	     {
	         System.out.print(tnode.data+" ");  // converting to a string
	         tnode = tnode.next;
	     }
		
	}
	
	/* Given a key, deletes the first occurrence of key in linked list */
	void deleteNode(int key)
	{
		Node tnode = head;
		
		// If head node itself holds the key to be deleted
		if(head != null && head.data == key){
			head = head.next;
			return;
		}
		
		while(tnode.next != null)
		{
			if(tnode.next.data == key)
			{
				tnode.next = tnode.next.next;
				return;
			}
			tnode = tnode.next;
		}
		
		System.err.println("\nNo such node key found");
		
	}
	
	 /* Given a reference (pointer to pointer) to the head of a list
    and a position, deletes the node at the given position */
	void deleteNodeAtPosition(int PositionKey)
	{
		// If linked list is empty
        if (head == null)
        	{ return;}
        
		Node temp = head;
		if(PositionKey == 1)
		{
			head = head.next;
			return;
		}
		
		// reach one node previous of the node u wanna remove
		PositionKey = PositionKey-2;
		while(PositionKey > 0)
		{
			temp = temp.next;
			PositionKey--;
			// If position is more than number of nodes
	        if (temp == null || temp.next == null)
	            return;
		}
	
		temp.next = temp.next.next;
		
	}
	
	void search(int dataToSearch)
	{
		Node tnode = head;
		int index =1;
		
		// If linked list is empty
        if (head == null)
        	{ return;}
        
		if(head.data == dataToSearch)
		{
			System.out.println("\ndata found at index " + index);
			return;
		}
		
		while(tnode != null)
		{
			if(tnode.data == dataToSearch)
			{
				System.out.println("\ndata found at index " + index);
				return;
			}
			index++;
			tnode = tnode.next;
		}
		System.out.println("\nData not found ");
	}
	
	void searchUsingRecursion(Node head ,int dataToSearch,int startIndex)
	{
		// If linked list is empty
        if (head == null)
        	{ return ;}
 
        // If key is present in head node, return true
        if (head.data == dataToSearch)
        {
        	System.out.println("\ndata found at index " + startIndex);
        	return;
        }
        
        startIndex = startIndex+1;
        // Recur for remaining list
        searchUsingRecursion(head.next, dataToSearch,startIndex);
		
	}
	
	void reverseLinkList()	
	{ 
	    Node pre_node = null;
	    Node current= head;
	    Node next = null;
	    
	    // If linked list is empty or only head node is present 
        if (head == null || head.next ==null)
        	{ return ;}
        
        //Reach the 2nd last node
        while(current!= null)
        { 
        	next = current.next;
        	current.next = pre_node;
            pre_node = current;
            current = next;
        }
        head = pre_node;
	}
	
	
	void reverseLinkListByRecursion(Node temp, Node pre_Node)
	{
        if(temp.next == null)
        {
        	temp = head;
        	return;
        }
        reverseLinkListByRecursion(temp.next, pre_Node);
        prev_node.next = temp;
        temp.next = null;
       
		
	}	
	public static void main(String[] args) {
		
		LinkListInsertionsAndDeletions llist = new LinkListInsertionsAndDeletions();
		llist.addInEnd(6);
		llist.addInFront(7);
		llist.addInFront(1);
		llist.addInEnd(1);
		llist.addInEnd(4);
		//Till now  we have  1->7->6->4->NUllist
		
		// Insert 8, after 7. So linked list becomes  1->7->8->6->4->1->NUllist
		llist.insertAfter(llist.head.next, 8);

	    System.out.println("\nCreated Linked list is: ");
	    llist.printList();
	     
	    // Deletion Operations
	    
	    llist.deleteNode(1);
	    
	    System.out.println("\nLinked list after first deletion is: ");
	    llist.printList(); 					
	    //So :inklist becomes   7->8->6->4->1->NUllist
	    
	   // llist.deleteNode(62);// invalid deletion
	    
	    llist.deleteNodeAtPosition(9); 
	    // so Linklist becomes 7->8->4->1->NUllist
	    System.out.println("\nLinked list after 2nd deletion is: ");
	    llist.printList();
	    
	    // Search Element in the link list 
	    llist.search(8);
	    
	    llist.searchUsingRecursion(llist.head,8,1); // the last field helps us  maintains the index were we will found the data key
	    
	    //Reverse a linkList
	    llist.reverseLinkList();
	    System.out.println("\nLinked list after Reversal is : ");
	    llist.printList();
	    
	    llist.reverseLinkListByRecursion(llist.head, llist.head);
	    System.out.println("\nLinked list after Reversal is : ");
	    llist.printList();
	}
	
}
