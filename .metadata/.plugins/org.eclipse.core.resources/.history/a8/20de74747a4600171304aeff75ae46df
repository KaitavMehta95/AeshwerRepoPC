package BinaryTrees;
/*
 * he diameter of a tree (sometimes called the width) is the number of nodes on the longest path between two leaves in the tree
 * http://www.geeksforgeeks.org/diameter-of-a-binary-tree/
 */

import BinaryTrees.BinaryTreeTraversal.Node;

public class DiameterOfATree {
	Node root;
	public static class Node
	{
	    int key;
	    Node left, right;
	 
	    public Node(int key)
	    {
	        this.key = key;
	        left = right = null;
	    }
	}
	
	int diameter(Node root)
	{
		if(root== null)
		{return -1;}
		int leftheight = diameter(root.left);
		int rightheight = diameter(root.right); 
		int width = leftheight + rightheight +1;
		return 
		
		
	}
	
	 // The function Compute the "height" of a tree. 
	static int height(Node node)
	{
		/* base case tree is empty */
		if (node == null)
          return 0;

      /* If tree is not empty then height = 1 + max of left
         height and right heights */
      return (1 + Math.max(height(node.left), height(node.right)));
	}
  
	public static void main(String[] args) {
		
        /* creating a binary tree and entering the nodes */
		DiameterOfATree tree = new DiameterOfATree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
 
        System.out.println("The diameter of given binary tree is : "+ tree.diameter(tree.root));
    }

}
