/*
 * http://www.geeksforgeeks.org/dynamic-programming-set-13-cutting-a-rod/
 */
package DynamicProgrammingPractise;

public class RodCuttingProblem {

	/* Returns the best obtainable price for a rod of
    length n and price[] as prices of different pieces */
 static int cutRod(int price[],int n)
 {
     int val[] = new int[n+1];
     val[0] = 0;

     // Build the table val[] in bottom up manner and return
     // the last entry from the table
     for (int i = 1; i<=n; i++)
     {
         int max_val = Integer.MIN_VALUE;
         for (int j = 0; j < i; j++)
             max_val = Math.max(max_val, 
                                price[j] + val[i-j-1]);
         val[i] = max_val;
     }

     return val[n];
 }
 
 public static int maxValue1(int price[]){
     int max[] = new int[price.length+1];
     for(int i=1; i <= price.length; i++){
         max[i] = price[i-1];
     }
     for(int i=1 ; i <= price.length; i++){
         for(int j=1; j < i ; j++){
             max[i] = Math.max(max[i], max[i-j] + max[j]);
         }
     }
     return max[price.length];
 }
 
 
	public static void main(String[] args) {
		int arr[] = new int[] {1, 5, 8, 9, 10, 17, 17, 20};
        int size = arr.length;
        System.out.println("Maximum Obtainable Value is " + cutRod(arr, size));
        System.out.println("Maximum Obtainable Value is " + maxValue1(arr));
	}
}
