package com.udemy.ForkJoinAlgo;

import java.util.Random;
import java.util.concurrent.ForkJoinPool;

import com.udemy.paralleAlgo.ParallelMergeSort;

public class App {

	public static int THRESHOLD = 0;
	
	public static void main(String[] args) {
		
		int nums[] = initializeNums();
		THRESHOLD = nums.length /(Runtime.getRuntime().availableProcessors());
		
		// run the algorithm and time how long it takes ======SEQUENTIAL
		SequentialMaxFind sequentialMaxFind = new SequentialMaxFind(nums, nums.length);
		long startTime1 = System.currentTimeMillis();
		System.out.println("MAX IS : " + sequentialMaxFind.SequentialMaxFind());
		long endTime1 = System.currentTimeMillis();
		System.out.printf("Time taken in SEQUENTIAL =>  %6d ms \n", endTime1 - startTime1);
		
		
		// run the algorithm and time how long it takes ======PARALLEL
		ParallelMaxFind parallelMaxFind = new ParallelMaxFind(nums, nums.length, 0);
		ForkJoinPool forkJoinPool =  new ForkJoinPool(THRESHOLD);
		long startTime2 = System.currentTimeMillis();
		System.out.println("MAX IS : " + parallelMaxFind.mergerSort(0, numbers.length-1));
		long endTime2 = System.currentTimeMillis();
		System.out.printf("Time taken in Parallel =>  %6d ms \n", endTime2 - startTime2);
		
				
		
	}

	private static int[] initializeNums() {
		Random random = new Random();
		int[] a = new int[100000000];
		for (int i = 0; i < 100000000; i++) {
			a[i] = random.nextInt(100000000);			
		}
		return a;
	}
}
