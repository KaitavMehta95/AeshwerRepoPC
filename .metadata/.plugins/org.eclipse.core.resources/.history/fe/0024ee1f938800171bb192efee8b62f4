/*
 * Given two sequences, find the length of longest subsequence present in both of them. A subsequence is a sequence that appears in the same 
 * relative order, but not necessarily contiguous. For example, “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”, .. etc are subsequences of “abcdefg”.
 *  So a string of length n has 2^n different possible subsequences.
 *  
 *  Examples:
	LCS for input Sequences “ABCDGH” and “AEDFHR” is “ADH” of length 3.
	LCS for input Sequences “AGGTAB” and “GXTXAYB” is “GTAB” of length 4.
 */
package DynamicProgrammingPractise;

public class LongestCommonSequence {
	 /* Returns length of LCS for X[0..m-1], Y[0..n-1] */
	  public static int lcs( char[] s1, char[] s2, int l1, int l2 )
	  {
		  int L[][] = new int[l1+1][l2+1];
		    /* Following steps build L[m+1][n+1] in bottom up fashion. Note
		         that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
		    for (int i=0; i<=l1; i++)
		    {
		      for (int j=0; j<=l2; j++)
		      {
		        if (i == 0 || j == 0)
		            L[i][j] = 0;
		        else if (s1[i-1] == s2[j-1])
		            L[i][j] = L[i-1][j-1] + 1;
		        else
		            L[i][j] = Math.max(L[i-1][j], L[i][j-1]);
		      }
		    }
		  return L[l1][l2];
		 
	  }
	  
	  public static void main(String[] args) {
		String s1 = "AGGTAB";
		String s2 = "GXTXAYB";
		char[] X=s1.toCharArray();
	    char[] Y=s2.toCharArray();
	    int l1 = X.length;
	    int l2 = Y.length;
	    System.out.println("Length of LCS is" + " " + lcs( X, Y, l1, l2) );
	  }		
	}
}
