package BinaryTrees;

import BinaryTrees.DeleteATree.Node;

public class BinaryTreeToMirroTree {

	Node root;
	public static class Node
	{
		int key;
		Node left;
		Node right;
		Node(int key){
			this.key = key;
			left = right = null; 
		}
	}
	
	void mirrorTree(Node root){
		
		if(root == null){
			return ;
		}
		
		Node temp;
		temp = root.left;
		root.left = root.right;
		root.right = temp;
		
		mirrorTree(root.left);
		mirrorTree(root.right);
		
	}
	
	 void printPostorder(Node node)
	  {
	      if (node == null)
	          return;

	      // first recur on left subtree
	      printPostorder(node.left);

	      // then recur on right subtree
	      printPostorder(node.right);

	      // now deal with the nod
	      System.out.print(node.key + " ");
	  }
	
	public static void main(String[] args) {e
		BinaryTreeToMirroTree tree = new BinaryTreeToMirroTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        
        tree.printPostorderln(tree.root);
        tree.mirrorTree(tree.root);
        tree.printPostorder(tree.root);
	}
}
