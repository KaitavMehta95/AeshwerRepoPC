package DynamicProgrammingLearn;

import java.util.Stack;

/*Find the largest rectangular area possible in a given histogram where the largest rectangle can be made of a 
 * number of contiguous bars. For simplicity, assume that all bars have same width and the width is 1 unit.
 * Refer : http://www.geeksforgeeks.org/largest-rectangle-under-histogram/
 */
public class LargestAreaRectangleInHistogram {
	
	static void getMaxArea(Integer[] hist, int len)
	{ 
		// Create an empty stack. The stack holds indexes of hist[] array
	    // The bars stored in stack are always in increasing order of their heights.
		Stack<Integer> stack = new Stack<Integer>();
	    int max_area = 0; // Initalize max area
	    int tp;  // To store top of stack
	    int area_with_top; // To store area with top bar as the smallest bar
	    
	    // Run through all bars of given histogram
	    int i = 0;
	    while (i < len)
	    {
	    	// If this bar is higher than the bar on top stack, push it to stack
	        if (stack.empty()|| hist[stack.peek().intValue()] <= hist[i])
	        { stack.push(i++);}

	        // If this bar is lower than top of stack, then calculate area of rectangle 
	        // with stack top as the smallest (or minimum height) bar. 'i' is 
	        // 'right index' for the top and element before top in stack is 'left index'
	        else
	        {
	    	
	    }
		
	}
	
	public static void main(String[] args) {
		Integer hist[] = {6, 2, 5, 4, 5, 1, 6};
	    int len = hist.length;
	    getMaxArea(hist, len);
	}
}
