package BinaryTrees;

import BinaryTrees.HeightOfBinaryTreeIterative.Node;
/*
 * To identify if two trees are identical, we need to traverse both trees simultaneously, and while
 *  traversing we need to compare data and children of the trees.
 */
public class IdenticalTrees {
	Node root1,root2;
	static class Node
	{
		Node left;
		Node right;
		int key;
		Node(int key)
		{
			this.left= left;
			this.right= right;
			this.key =key;
		}
	}
	
	boolean checkIdentical(){
	
		if(root1 == null && root2 == null){return true;}
	}
	
	public static void main(String[] args) {

		IdenticalTrees tree = new IdenticalTrees();
        tree.root1 = new Node(1);
        tree.root1.left = new Node(2);
        tree.root1.right = new Node(3);
        tree.root1.left.left = new Node(4);
        tree.root1.left.right = new Node(5);

        tree.root2 = new Node(1);
        tree.root2.left = new Node(2);
        tree.root2.right = new Node(3);
        tree.root2.left.left = new Node(4);
        tree.root2.left.right = new Node(5);
        
        System.out.println("They are Identical ::" + tree.checkIdentical());
        
	}


}
