/*
 * Given two sequences, find the length of longest subsequence present in both of them. A subsequence is a sequence that appears in the same 
 * relative order, but not necessarily contiguous. For example, “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”, .. etc are subsequences of “abcdefg”.
 *  So a string of length n has 2^n different possible subsequences.
 *  
 *  Examples:
	LCS for input Sequences “ABCDGH” and “AEDFHR” is “ADH” of length 3.
	LCS for input Sequences “AGGTAB” and “GXTXAYB” is “GTAB” of length 4.
 */
package DynamicProgrammingPractise;

public class LongestCommonSubSequence {
	private static int lcsDynamic(char[] charArray, char[] charArray2) {
		// TODO Auto-generated method stub
		return 0;
	}		
	  public static void main(String[] args) {
		  
		  	String str1 = "ABCDGHLQR";
	        String str2 = "AEDPHR";
	        int result = lcsDynamic(str1.toCharArray(), str2.toCharArray());
	        System.out.print(result);
	  }
}
