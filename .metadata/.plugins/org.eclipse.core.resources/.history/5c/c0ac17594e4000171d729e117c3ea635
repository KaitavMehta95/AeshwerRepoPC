package BinaryTrees;
/*
 * http://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/
 */

public class BinaryTreeTraversal {

	Node root;
	public static class Node
	{
	    int key;
	    Node left, right;
	 
	    public Node(int key)
	    {
	        this.key = key;
	        left = right = null;
	    }
	}
	
	
	/* Given a binary tree, print its nodes according to the
    "bottom-up" postorder traversal. */
  void printPostorder(Node node){
  }

  /* Given a binary tree, print its nodes in inorder*/
  void printInorder(Node node)
  {
  }

  /* Given a binary tree, print its nodes in preorder*/
  void printPreorder(Node node)
  {
	  if (node == null)
          return;

      /* first print data of node */
      System.out.print(node.key + " ");

      /* then recur on left sutree */
      printPreorder(node.left);

      /* now recur on right subtree */
      printPreorder(node.right);
  }
	
  // Wrappers over above recursive functions
  void printPostorder() 
  {     printPostorder(root);  
  }
  
  void printInorder()    
  {     printInorder(root);   
  }
  
  void printPreorder()   
  {     printPreorder(root);  
  }
  
	public static void main(String[] args) {
		
		BinaryTreeTraversal tree = new BinaryTreeTraversal();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        
        System.out.println("Preorder traversal of binary tree is ");
        tree.printPreorder();
 
        System.out.println("\nInorder traversal of binary tree is ");
        tree.printInorder();
 
        System.out.println("\nPostorder traversal of binary tree is ");
        tree.printPostorder();
		
	}
}
