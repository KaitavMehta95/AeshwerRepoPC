package DynamicProgrammingLearn;
/*Given a value N, if we want to make change for N cents, and we have infinite supply of each
 *  of S = { S1, S2, .. , Sm} valued coins, how many ways can we make the change? The order of coins doesn’t matter.
 * For example, for N = 4 and S = {1,2,3}, there are four solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}. 
 * So output should be 4 with the minimum coins needed is 2 ie. {1,3}.
 * 
 * OPTIMUL SUBSTRUCTURE PROBLEM with recursion : C(p)= min for all i {C(p-vi)}+1
*/
public class CoinChangeProblem {
	
	public static void main(String[] args) {
	
	}
}
