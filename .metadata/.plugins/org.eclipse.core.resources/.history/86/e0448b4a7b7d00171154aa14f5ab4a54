package com.udemyConcurreny;

import java.util.ArrayList;
import java.util.List;

class Process{
	
	private List<Integer> list = new ArrayList<Integer>();
	
	private final int LIMIT = 5;
	
	private final int BOTTOM  = 0;
	
	private final  Object lock=new Object();
	
	private int values = 0;
	
	public void produce() throws InterruptedException
	{
		synchronized (lock) {    // Intrinsic class levellock
			
			while(true){
				if(list.size() == LIMIT)
				{
					System.out.println("Waiting for removing items from list");
					lock.wait(); // be carefull... u cant use just wait() as that will be for the wait of the class level lock 	
				}
				
				else
				{
					System.out.println("Adding values:" +values);
					list.add(values);
					values++;
					lock.notify();
				}
				
			}
		}
	}
	
	public void consume() throws InterruptedException
	{
		synchronized (lock){
			
			while(true){
				if(list.size() == BOTTOM)
				{
					System.out.println("Waiting for items to add to the list");
					lock.wait(); // be carefull... u cant use just wait() as that will be for the wait of the class level lock 	
				}
				
				else
				{
					System.out.println("Removed values:" +list.remove(list.size()-1));
					list.add(values);
					values++;
					lock.notify();
				}
				
			}
		}
		
	}
	
}

public class ProducerConsumer {
	public static void main(String[] args) {
		
		Processor processor = new Processor(); 
		Thread t1 = new Thread(new Runnable(){
			 
			@Override
			public void run() 
			{
				try {
					processor.produce();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
		);
		
		Thread t2 = new Thread(new Runnable(){
			 
			@Override
			public void run() 
			{
				try {
					processor.consume();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
		);
		
		t1.start();
		t2.start();
		
		try {
			t1.join();
			t2.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
	} 
}
