package BinaryTrees;

import java.util.LinkedList;
import java.util.Stack;

public class InorderTraversalWithoutRecursion {
	Node root;
	static class Node
	{
		Node left;
		Node right;
		int key;
		Node(int key)
		{
			this.left= left;
			this.right= right;
			this.key =key;
		}
	}
	void inorder()
	{
		//base case
		 if (root == null) {return;}
		// Create an empty stack for level order tarversal
        Stack<Node> s = new Stack<Node>();	
        while (root != null) {
            s.push(root);
            root = root.left;
        }
        
        while(currentNode != null)
        {
        	while(currentNode != null )
        	{
        		s.push(currentNode.left);
        	}
        	if(currentNode != null && s.empty() == false)
    		{ 
        		Node temp = s.pop();
        		System.out.print(temp.key + " ");
        		currentNode = temp.right;
    		}
        }
	}
	
	public static void main(String[] args) {
		
		InorderTraversalWithoutRecursion tree = new InorderTraversalWithoutRecursion();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        
        tree.inorder();
	}
}
