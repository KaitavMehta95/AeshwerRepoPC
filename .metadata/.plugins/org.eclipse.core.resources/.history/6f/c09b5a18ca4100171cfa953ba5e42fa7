package BinaryTrees;

import BinaryTrees.LevelOrderLineByLine.Node;
/*
 *  We can use level order traversal to find height without recursion. The idea is to traverse level by level. Whenever move down to a level, 
 *  increment height by 1 (height is initialized as 0). Count number of nodes at each level, stop traversing when count of nodes at next level is 0
 */
public class HeightOfBinaryTreeIterative {
	Node root;
	static class Node
	{
		Node left;
		Node right;
		int key;
		Node(int key)
		{
			this.left= left;
			this.right= right;
			this.key =key;
		}
	}
	
	int heightOfTree()
	{
        // Base Case
        if (root == null)
            return 0;
		
	}
	
	public static void main(String[] args) {

		HeightOfBinaryTreeIterative tree = new HeightOfBinaryTreeIterative();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        
        System.out.println("Height of tree is :: "+tree.heightOfTree());
	}

}
