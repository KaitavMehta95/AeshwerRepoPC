DOCKER

Introduction:
1.	MainFrame -> PC  -> Baremetal  -> Virtual -> Datacenter -> Cloud -> Host -> Containers
2.	Why	Docker ? Matrix of Hell solved, Speed
3.	Docker on windows: Linux(Default) and Windows Containers
4.  For windows 7 : use Docker ToolBox , it runs a tiny Linux VM in virtualBox via docker-machine. Here it don't support windows containers	
	
Working:
1.  Docker-machine creates a VMs on cloud or local machine which run docker. 
	Do : docker-machine ls
	First one is named 'default' 
	Do : docker-machine start
	Do : docker verison
2.  Code paths enabled for Bind Mounts works in C:Users only

Creating Containers
1.  Containers are processes limited to resources they can access. Exits when process stops
2.  docker version : retuns the version of client and also of server(called engine)
3.  docker info : more information
4.  Image vs Containers: Image is the app we want to run while a container is an instance of that image running as a process. We can have many containers running of the same image.Dockers defaut image "registry" is call ed Docker Hub
5.  Start a new container:
	Do : docker container run --publish 80:80 nginx  and visit localhost on browser(or http://192.168.99.100 on windows)
	Working : In backgroud , docker engine looked for a nginx image called 'nginx' from Docker Hub. Then started a new container from that image.Publish syntax then opened port 80 on hostIP
	Do : docker container run --publish 80:80 --detach nginx  :: tells docker to run in background and return the unique "containerId"   
	Do : docker conatiner ls :  list our containers
	Do : docker container stop "containerId"
	Do : docker container ls -a : each time u do run command , a new conatiner is made from that image.See results from this commands
	Do : docker container run --publish 80:80 --detach --name aeshwer nginx  :  can give name also
	Do : docker container logs aeshwer :  Get logs of this container
	Do : docker container rm "containerId1" "containerId2" "containerId3"  : To stop multiple containers by 1 command. Use "-f" to force stop running ones
	Do : docker top "containerName" : list the process running inside this container
6.  What happens in docker container run ???	 Firstly looks for image in cache else download latest it and start a new container 	  based on it and give a virtual Ip on  private network inside docker engine and opens port 80 on host and forwards to port 80 in container.
7.  Other ways to start  : docker run --name aeshwer -d nginx  : Now do docker stop/start aeshwer  ..(-d or --detach are same)
8.  NOTE: to test if ports resond for a service: curl localhosty or curl http://192.168.99.100
9.  Do: docker image ls  : Command to list images
10. Logs following: docker container logs -f containerName

More on Containers
1.  Do : docker container top  :  process list in one command
2.  Do : docker container inspect  : details of one container config
3.  Do : docker container stats : performance stats for all containers

Creating a Shell Inside a Container
1.  Do : docker container run -it : start new container interactively
		Note: docker container run -it --name proxy nginx bash : you can open a SSH bash shell by this with root on container.Write "exit" to come out of shell               		
2.  Do : docker container exec -it : run additional command/process in existing runnning container
		Note : docker container exec -it mysql bash : it runs the bash program 
3.  No need of SSH , docker client is a great substitute for that
4.  Do : docker container start -ai nginx : start a existing container

Docker Networks:
1.  When we start a container , we are really in backgroud connecting to a particular docker network (bridge newtwork) and each of these virtual network rouites through NAT firewall on hostIP. Acutuall the docker deamon configures thes host IP on its default interface, so that the container  can get out on internet.
2.  Best Practice : Create a new virtual network for each app
3.  -p attribute : -p Host: Container  ,eg. -p 80:80
4.  Do : docker container port containerName : gives the port for this container
5.  Do : docker network ls : list network
5.  Do : docker network inspect networkName : details of network
6.  DO : docker network create --driver : crete a new network
		Note :  start/stop network : 
		> docker network connect   : eg. docker network connect newNetworkId oldContainerId
		> docker network disconnect  eg. docker network disconnect newNetworkId oldContainerId
7.  There is also a network by default called "host" : gains performance by skiping virtual network but sacrifices secruity

Docker Networks: DNS(Domain Name System)
1.  Docker daemon has a build-in  DNS server that container use by default
2.  Docker defaults the hostName to continerName but we can change that
3.  DNS round Robin : we can have multiple continers on a created network respond to same DNS address	

Docker Images
1.  What?  App binaries and dependencies and metadate about the image data and how to run the image. There is no complete OS or kernal, the host provide the kernal 
2.  Image Layers concept:  images are made up of file system changes and metadata. A container is just a single read/write  layer on top of image 
3.  How to rename tag of existing image : 
	Do : docker image tag originalImageTag newImageTag:Tag
4.	How to rename tag of existing image to repository before push:
	Do : docker tag imageId RepositoryName
5.  How to push a images
	Do : docker image push imageName
	Note : Use "docker login" command to login before using pushing
	
Building Images	
1.	Using Vim command:
	Do : vim dockerFile : opens the file
	Do : For exit , type :q -> enter
	Do : For edit and save , type i -> edit -> escape to come out of insert mode -> :x! to save and exit
	Do : For edit and discard , type i -> edit -> escape to come out of insert mode -> :wq to discard and exit
	
2.  Do : docker image build -t TagName . : the dot in last tells in build this image in this directory with this tag name

Container LifeTime And Persistent Data
1.  By default all files created inside a container are stored on a writable container layer(UFS).Its implications are: 
	(#)The data doesn’t persist when that container is no longer running, and it can be difficult to get the data out of the container if another process needs it.
	(#)A container’s writable layer is tightly coupled to the host machine where the container is running. You can’t easily move the data somewhere else.
2.  Docker has two options for containers to store files in the host machine, so that the files are persisted even after the container stops: 
	Volumes and Bind Mounts.	
3.  Volumes are stored in a part of the host filesystem which is managed by Docker 
	Do : use the 'VOLUME' keywork in dockerFile to tell a location for persistence data to store and outlive when container is exited.These need Manual deletion after contained is deleted,if you want to remove this.
4. 	Do : docker volume inspect volumeName : this gives info about used volumne. You can also do "docker image inspect imageName and see under 'volumne' attribute the info"
5.  Friendly way to assign volumes to conatiner is "Named Volumes"
	Do:  docker container run -d --name mysql2 -e MYSQL_ALLOW_EMPTY=True -v mysql-db:/var/lib/mysql imageName -> observe named volume syntax using -v attribute
6.  Binding Mounts maps a host file or directory to a container file or directory, basically 2 location pointing to same files.One limitation is that its is on runtime and Os path dependent
7.  Example of mounts : docker container run -d --name nginxNew -p 80:80 -v $(pwd):/usr/share/nginx/html nginx
9.  Do :  docker volume prune : this removes the all volumes 

Docker Compose
1.  These are YAML files in which you can define the operations you want to do.
2.  docker-compose CLI: Not a production grade tool. Two common commands are:
	Do: docker-compose up : setup volume/network and start all container
	Do: docker-compose down : remove volume/network and stop all container 
	Do: docker-compose logs : get the logs 